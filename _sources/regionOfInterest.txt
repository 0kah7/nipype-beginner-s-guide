=======================================
How to extract region of interest (ROI)
=======================================

In this part we will learn how to extract statistical data from a strictly specified region or in other words our **region of interest (ROI)**.

Anatomical vs. Functional ROI
=============================

We will learn how to extract anatomical and functional ROIs, two ways of extraction which differ mostly by the definition of the ROI-region.

Anatomical ROI
~~~~~~~~~~~~~~

The region of anatomical ROIs is as the name implies defined by the anatomical structure of the brain. Such definition of anatomical regions and there segmentation is often stored in so called atlas. A well know atlas which is used by **Nipype** as default is the **FreeSurfer Color Table**, which can be found `here <http://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT>`_.



This color table subdivides the brain in different anatomical regions. With the FreeSurfer Color Table you can differentiate between gray matter and white matter areas, between a general specification that divides the brain into +30 regions (the **2005** region specification) or a more detailed specification category that divides the brain into +200 regions (the **2009** region specification)

**Visualization of 2005 Segmentation**

.. image:: 2005segmentation.png
   :width: 200 px


**Visualization of 2009 Segmentation**

.. image:: 2009segmentation.png
   :width: 200 px


.. hint::

   If you want to explore those regions by ourself I recommend to open a **FreeSurfer** capable viewing tool and overlay the ``fsaverage`` file with an annotation-file. More information how this is done can be found here: **MISSING_LINK**


Functional ROI
~~~~~~~~~~~~~~

The region of functional ROIs is solely defined by what point in "brain"-space you are interested in. You're region of interest is most likely where there is a peak or interesting activation in your functional data, hence its name. The specification of the region can be done in different ways. Some may want to look at a cubic region with the point of interest as its center. Others want to extract a spherical region around a point of interest. And this is exactly what we will be doing in this script.

**Visualization of a functional ROI**

Here you can see a spherical region with radius 3 voxel around the point [a,b,c] in xxxxx-space.

.. image:: functionalROI.png
   :width: 200 px


Anatomical ROI Pipeline
=======================

Let's now begin with the creation of an **anatomical ROI pipeline**.


Import modules
~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   import os                                    # system functions
   import nipype.interfaces.freesurfer as fs    # freesurfer
   import nipype.interfaces.io as nio           # i/o routines
   import nipype.interfaces.utility as util     # utility
   import nipype.pipeline.engine as pe          # pypeline engine


Define experiment specific parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #to better access the parent folder of the experiment
   experiment_dir = '~SOMEPATH/experiment'

   ###   # Tell freesurfer what subjects directory to use
   ###   subjects_dir = experiment_dir + '/freesurfer_data'
   ###   fs.FSCommand.set_default_subjects_dir(subjects_dir)

   #dirnames for anatomical ROI pipeline
   aROIWorkingdir = '/result/aROI_workingdir' #location and name of workingdir
   aROIOutput = 'result/aROI_Output'         #location and name of aROI datasink
   l1contrastDir = 'level1_output'            #name of first level datasink
   
   #list of subjectnames
   subjects = ['subject1', 'subject2', 'subject3']
   
   #list of contrastnumbers the pipeline should consider
   contrasts = ['01','02','03','04','05']

   ###   #name of the first session from the first level pipeline
   ###   nameOfFirstSession = 'func1'
   
.. note::

   The name of the first session is necessary, because the bbregister file from the first level pipeline contains the name of the first session in its name. E.g. if the first condition is named ``func1``, than the name of the bbregister file for the first subject would be: ``meanafunc1_bbreg_subject1.dat')``

Define aROI specific parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As mentioned above we are using the FreeSurfer Color Table to define the anatomical regions. This table can be found `here <http://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT>`_. Let's assume that we want to extract the following regions:

* id: 1001 ; region xxxxxx ; from coding part 2005
* id: 2001 ; region xxxxxx ; from coding part 2005
* id: 1030 ; region xxxxxx ; from coding part 2005
* id: 2030 ; region xxxxxx ; from coding part 2005
* id: 11 ; region xxxxxx ; from coding part 2009
* id: 50 ; region xxxxxx ; from coding part 2009
* id: 12 ; region xxxxxx ; from coding part 2009
* id: 51 ; region xxxxxx ; from coding part 2009
* id: 11104 ; region xxxxxx ; from coding part 2009
* id: 12104 ; region xxxxxx ; from coding part 2009

.. code-block:: py
   :linenos:

   #Specification of the regions from the 2005 and 2009 part of the FreeSurfer Color Table
   ROIregions2005 = ['1001','2001','1030','2030']
   ROIregions2009 = ['11','50','12','51','11104','12104']
      

Define of Nodes
~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #Node: IdentityInterface - to iterate over subjects and contrasts
   inputnode = pe.Node(interface=util.IdentityInterface(fields=['subject_id','contrast_id']),
                       name='inputnode')
   inputnode.iterables = [('subject_id', subjects),
                          ('contrast_id', contrasts)]

As always, it is important to be aware about the structure and the names of the data we want to grab. In this case we want to grab the subject specific contrasts and bbregister file from the first level pipeline. For example the second contrast for the third subject can be found at: ``'~SOMEPATH/experiment/result/level1_output/vol_contrast/_subject_id_subject3/con0002.img'`` and the bbregister file for the first subject can be found at: ``'~SOMEPATH/experiment/result/level1_output/bbregister/_subject_id_subject1/meanafunc1_bbreg_subject1.dat'``
Knowing this, we can build our ``datagrabber`` node as follows:

.. code-block:: py
   :linenos:

   #Node: DataGrabber - to grab the input data
   datasource = pe.Node(interface=nio.DataGrabber(infields=['subject_id','contrast_id'],
                                                  outfields=['contrast','bb_id']),
                        name = 'datasource')
   datasource.inputs.base_directory = experiment_dir + 'result/' + l1contrastDir
   datasource.inputs.template = '/%s/_subject_id_%s/%s%s%s'
   
   info = dict(contrast = [['vol_contrasts','subject_id','con_00','contrast_id','.img']],
               bb_id = [['bbregister','subject_id','meana'+nameOfFirstSession+'_bbreg_',
                         'subject_id','.dat']])
   
   datasource.inputs.template_args = info
   
Let's now continue with the implementation of the other nodes we need for our **anatomical ROI pipeline**.
   
.. code-block:: py
   :linenos:

   #Node: FreeSurferSource - to grab FreeSurfer files from the recon-all process
   fssource = pe.Node(interface=nio.FreeSurferSource(),name='fssource')
   fssource.inputs.subjects_dir = subjects_dir
   
   #Node: MRIConvert - to convert files from FreeSurfer format into nifti format
   MRIconversion = pe.Node(interface=fs.MRIConvert(),name='MRIconversion')
   MRIconversion.inputs.out_type = 'nii'
   
   #Node: ApplyVolTransform - to transform contrasts into anatomical space
   #                          creates 'con_*.anat.bb.mgh' files
   transformation = pe.Node(interface=fs.ApplyVolTransform(),name='transformation')
   transformation.inputs.fs_target = True
   transformation.inputs.interp = 'nearest'
   

As you know we want to extract some regions from the 2005 and some from the 2009 segmentation classification. But if you 
look at the mandatory inputs of the ``SegStats`` node you will see that we have to specify a value for ``segment_id``
and one for ``segmentation_file``. Because we specified the list of segmentation ids separately for the 2005 and 2009 part, we have to specify
two

###möglich wäre es natürlich auch iteration zu machen
wieso mach ich überhauüt separation???
chönt mer ned alles grad i 1 liste inetue?

segment_id   
aparc_aseg
segmentation_file =  segmentation volume path



.. code-block:: py
   :linenos:

   #Node: SegStats2005 - to extract specified regions from the 2005 part of the color table
   segmentation2005 = pe.Node(interface=fs.SegStats(),name='segmentation2005')
   segmentation2005.inputs.color_table_file = '/software/Freesurfer/5.1.0/FreeSurferColorLUT.txt'
   segmentation2005.inputs.segment_id = ROIregions2005 #2005 segmentation ids
   
   #Node: SegStats2009 - to extract specified regions from the 2009 part of the color table
   segmentation2009 = pe.Node(interface=fs.SegStats(),name='segmentation2009')
   segmentation2009.inputs.color_table_file = '/software/Freesurfer/5.1.0/FreeSurferColorLUT.txt'
   segmentation2009.inputs.segment_id = ROIregions2009 #2009 segmentation ids

   def getVersion(in_file, version):
       if version == 0:
          return in_file[0]
       else:
          return in_file[1]


.. note::

   If you don't define a list of segmentation ids (input: ``segment_id``) the pipeline would just extract all possible regions. This is not bad but would just take a while.


.. code-block:: py
   :linenos:

   #Node: Datasink - Creates a datasink node to store important outputs
   datasink = pe.Node(interface=nio.DataSink(), name="datasink")
   datasink.inputs.base_directory = experiment_dir
   datasink.inputs.container = aROIOutput 



Definition of anatomical ROI workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #Initiation of the ROI extraction workflow
   aROIflow = pe.Workflow(name='aROIflow')
   aROIflow.base_dir = experiment_dir + aROIWorkingdir

   #Connect up all components
   aROIflow.connect([(inputnode, datasource,[('subject_id', 'subject_id'),
                                             ('contrast_id', 'contrast_id'),
                                             ]),
                     (inputnode, fssource,[('subject_id', 'subject_id')]),
                     (fssource, segmentation2005,[(('aparc_aseg',getVersion,0), 'segmentation_file')]),
                     (fssource, segmentation2009,[(('aparc_aseg',getVersion,1), 'segmentation_file')]),
                     (datasource, MRIconversion,[('contrast', 'in_file')]),
                     (MRIconversion, transformation,[('out_file', 'source_file')]),
                     (datasource, transformation,[('bb_id', 'reg_file')]),
                     (transformation, segmentation2005,[('transformed_file', 'in_file')]),
                     (transformation, segmentation2009,[('transformed_file', 'in_file')]),
                     (segmentation2005, datasink,[('summary_file', 'segstat')]),
                     (segmentation2009, datasink,[('summary_file', 'segstat2009')]),
                     ])
   

Run pipeline and generate graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   aROIflow.write_graph(graph2use='flat')
   aROIflow.run(plugin='MultiProc', plugin_args={'n_procs' : 2})


**Visualization of anatomical ROI pipeline**

.. image:: aROIgraph.png
   :width: 200 px


Summarizing the output in a cvs-file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:
   
   for contrast in contrasts:
   
       output = []
       for i in range(15000):
           output.append([i,'LABEL'])
   
       subjectNumber = 1
   
       for subject in subjects:
   
           #Find the location of the two output files
           statsFile = experiment_dir+'/'+aROIOutput +'/segstat/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
           statsFile2009 = experiment_dir+'/'+aROIOutput +'/segstat2009/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
   
           #Get the data from the two output files
           dataFile = open(statsFile, 'r')
           data = dataFile.readlines()
           dataFile.close()
           dataFile = open(statsFile2009, 'r')
           data2009 = dataFile.readlines()
           dataFile.close()
       
           #to check where the data starts
           def findStartOfData(datafile):
               for line in range(100):
                   if datafile[line][0] != '#':
                       return line
       
           tempresult = []
   
           for line in range(len(data)):
               if line < findStartOfData(data):
                   pass
               else:
                   temp = data[line].strip('\n').split()
                   tempresult.append([int(temp[1]),temp[4],float(temp[5])])

           for line in range(len(data2009)):
               if line < findStartOfData(data2009):
                   pass
               else:
                   temp = data2009[line].strip('\n').split()
                   tempresult.append([int(temp[1]),temp[4],float(temp[5])])
   
           tempresult.sort()
   
           result = []
   
           for line in range(len(tempresult)):
               if line > 0 and tempresult[line] == tempresult[line-1]:
                   pass
               else:
                   result.append(tempresult[line])
   
           for ROI in result:
               if output[ROI[0]][1] == 'LABEL':
                  output[ROI[0]][1] = ROI[1]
               output[ROI[0]].append(ROI[2])
   
           for ROI in output:
               if len(ROI) < subjectNumber+2:
                  ROI.append(0.0)
   
           subjectNumber += 1
   
       
       output.insert(0,['SegId','StructName'])
       output[0].extend(subjects)
   
       output = [ROI for ROI in output if ROI[1] != 'LABEL']
   

       import csv
       f = open(aROIOutput +'/ROI_'+contrast+'_result.csv','wb')
       outputFile = csv.writer(f)
   
       for line in output:
           outputFile.writerow(line)
   
       f.close()


.. hint::

   The code for this anatomical ROI pipeline can be found here: `aROIpipeline.py <http://github.com/miykael/nipype-beginner-s-guide/blob/master/aROIpipeline.py.py>`_


Functional ROI Pipeline
=======================

As said before, the most important difference to the extraction of an antomical ROI is that the region of interest isn't predifined by some atlas.
We define the region we are interested in solely by a point in "brain"-space and by a the radius of a sphere around this point. The procedure to this is quite simple:

1. define a point of interest and create a sphere around it
2. overlay this sphere on to a subject
3. extract the data from this sphere

Our **functional ROI pipeline** does almost exactly this. The only difference is that we have to divide the first step into some smaller substeps:
a. Take a subject specific contrast, multiply all voxels by 0 and add the value 1 to each. This leads  to a contrast file where all voxels have the value 1
b. Define a cubic area around your point of interest (this is done by defining a corner of the cube and the length of its sides)
c. Take this cubic region in "brain"-space where all voxel in the cube have values 1 and all outside this region have the value 0 and smooth this cube to a sphere

A visualization of those steps would look like this:

**Step A**

.. image:: fROIsubstepA.png
   :width: 200 px

**Step B**
   
.. image:: fROIsubstepB.png
   :width: 200 px
   
**Step C**
   
.. image:: fROIsubstepC.png
   :width: 200 px


Let's now begin with the creation of a **functional ROI pipeline**.


Import modules
~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   import os                                    # system functions
   import nipype.interfaces.freesurfer as fs    # freesurfer
   import nipype.interfaces.io as nio           # i/o routines
   import nipype.interfaces.utility as util     # utility
   import nipype.pipeline.engine as pe          # pypeline engine
   import nipype.interfaces.fsl as fsl          # fsl module


Define experiment specific parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #to better access the parent folder of the experiment
   experiment_dir = '~SOMEPATH/experiment'

   #dirnames for functional ROI pipeline
   fROIWorkingdir = '/result/fROI_workingdir' #location and name of workingdir
   fROIOutput = 'result/fROI_Output'          #location and name of fROI datasink
   
   #list of subjectnames
   subjects = ['subject1', 'subject2', 'subject3']
   
   #list of contrastnumbers the pipeline should consider
   contrasts = ['01','02','03','04','05']


Define fROI specific parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #define the coordination of point of interest
   centerOfROI = [183,134,136]
   
   #define the diameter of the sphere of interest
   diameter = 3

   #calculates the beginning corner of the cubic ROI
   corner = [centerOfROI[0]-diameter/2.0,
             centerOfROI[1]-diameter/2.0,
             centerOfROI[2]-diameter/2.0]


Definition of Nodes
~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #Node: IdentityInterface - to iterate over subjects and contrasts
   inputnode = pe.Node(interface=util.IdentityInterface(fields=['subject_id','contrast_id']),
                       name='inputnode')
   inputnode.iterables = [('subject_id', subjects),
                          ('contrast_id', contrasts)]
   
   
   #Node: DataGrabber - To grab the input data
   datasource = pe.Node(interface=nio.DataGrabber(infields=['subject_id','contrast_id'],
                                                  outfields=['contrast']),
                        name = 'datasource')
   datasource.inputs.base_directory = experiment_dir + 'result/' + l1contrastDir
   datasource.inputs.template = '/%s/normcons/con_%04d_ants.nii'
   datasource.inputs.template_args = dict(contrast = [['subject_id','contrast_id']])
   
   #Node: ImageMaths - to create the cubic ROI with value 1
   cubemask = pe.Node(interface=fsl.ImageMaths(),name="cubemask")
   cubemask.inputs.op_string = '-mul 0 -add 1 -roi %d %d %d %d %d %d 0 1'%(corner[0],diameter,corner[1],diameter,corner[2],diameter)
   cubemask.inputs.out_data_type = 'float'
   cubemask.inputs.in_file = '/mindhive/gablab/u/mnotter/att_sens/asens_normbrains_diff/%s/normcons/con_%04d_ants.nii'%(subjects[0],contrasts[0])
   
   #Node: ImageMaths - to smooth the cubic ROI to a sphere
   spheremask = pe.Node(interface=fsl.ImageMaths(),name="spheremask")
   spheremask.inputs.op_string = '-kernel sphere %d -fmean -thr 0.0000010000 -bin'%diameter
   spheremask.inputs.out_data_type = 'float'
   
   #Node: SegStats - to extract the statistic from a given segmentation
   segstat = pe.Node(interface=fs.SegStats(),name='segstat')
   
   #Node: Datasink - Create a datasink node to store important outputs
   datasink = pe.Node(interface=nio.DataSink(), name="datasink")
   datasink.inputs.base_directory = experiment_dir
   datasink.inputs.container = fROIOutput


.. note::

   If you are interested in what command actually will be executed by the ``cubemask`` node you just simply can execute ``cubemask.cmdline``. In this example this will give you the following output: ``blablabla``


Definition of functional ROI workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   #Initiation of the fROI extraction workflow
   fROIflow = pe.Workflow(name='fROIflow')
   fROIflow.base_dir = experiment_dir + fROIWorkingdir
   
   #Connect up all components
   fROIflow.connect([(cubemask, spheremask,[('out_file', 'in_file')]),
                     (infosource1, datasource,[('subject_id', 'subject_id')]),
                     (infosource2, datasource,[('contrast_id', 'contrast_id')]),
                     (spheremask, segstat,[('out_file', 'segmentation_file')]),
                     (datasource, segstat,[('contrast', 'in_file')]),
                     (segstat, datasink,[('summary_file', '@statistic')]),
                     ])
   
   

Run the pipeline and generate the graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   fROIflow.write_graph(graph2use='flat')
   fROIflow.run(plugin='MultiProc', plugin_args={'n_procs' : 4})
   

Summarizing the output in a cvs-file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py
   :linenos:

   output = []
   output.append(['coordinations:',centerOfROI,'diameter:',diameter])
   
   for contrast in contrasts:
       contrast = str(contrast)
       output.append(['contrast:',contrast])
   
       for subject in subjects:
   
           statFile = experiment_dir + '/' + fROIOutput + '/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
   
           #Get the data from the output file
           dataFile = open(statFile, 'r')
           data = dataFile.readlines()
           dataFile.close()
   
           output.append([subject,data[49].split()[5]])
   
       output.append([])
   
   import csv
   f = open(fROIOutput+'/fROI_spherical'+str(centerOfROI)+'_%s_result.csv'%diameter,'wb')
   outputFile = csv.writer(f)
   for line in output:
       outputFile.writerow(line)
   f.close()


.. hint::

   The code for this functional ROI pipeline can be found here: `fROIpipeline.py <http://github.com/miykael/nipype-beginner-s-guide/blob/master/fROIpipeline.py.py>`_

