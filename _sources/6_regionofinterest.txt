=======================================
How to extract region of interest (ROI)   
=======================================

TEXT wasi meine

Title1
======

Text

* **All consuming pipeline:**
   * Infosource
   * Datagrabber
   * **Metaworkflow:**
      * Inputnode (func, subject_id, session_info, contrasts)
      * **Preprocess pipeline:**
         * SliceTiming
         * Realign
         * ArtifactDetect
         * BBRegister
         * Smooth
      * **Volume analysis pipeline:**
         * SpecifyModel
         * Level1Design
         * EstimateModel
         * EstimateContrast
      * **Normalization pipeline:**
         * MRIConvert
         * FreeSurferSource
         * Segment
         * ApplyVolTransform
         * Normalize
   * Datasink


Below I've visualized the structure of our pipeline and most of the connections
between the nodes.

.. image:: workflow.png
   :width: 600 px


.. note::

   Some may ask  why we haven't included the infosource, datagrabber and datasink
   nodes into the metaworkflow.

   Because those nodes dependent highly on the paradigma specific parameters and
   will change for every model we want to separat them from the metaworkflow which
   will stay more or less the same for similar experiments. This does also give us
   the opportunity to just import this metaworkflow from this script into a new
   pipeline script and reuse it.


Anatomical ROIs
===============

Now that we have defined how the structure of our pipeline and the connections
should be we can start with writing the pipeline script.


Import modules
~~~~~~~~~~~~~~

First we have to import all necessary modules.

.. testcode::

   """
   Import modules
   ==============
   """
   import os                                    # system functions
   import nipype.interfaces.freesurfer as fs    # freesurfer
   import nipype.interfaces.io as nio           # i/o routines
   import nipype.interfaces.utility as util     # utility
   import nipype.pipeline.engine as pe          # pypeline engine
   import numpy as np
   
   """
   Define experiment specific parameters
   =====================================
   """
   #To better access the parent folder of the experiment
   experiment_dir = os.getcwd()
   Workingdir = '/result/workingdir_ROI_diffHG'
   ROIOutput =  'result/ROI_Output_diffHG'
   
   #name of the subjects, functional fiels and output folders
   subjects = ['asens_4','asens_5','asens_6','asens_7','asens_8','asens_9',
               'asens_10','asens_12','asens_13','asens_14','asens_15',
               'asens_16','asens_17','asens_18','asens_19','asens_20','asens_21']
   
   contrasts = ['03','10','11']
   
   ROIregions = ['1001','2001','1030','2030','1031','2031','1034','2034','1035','2035','1135','2135','1136','2136']
   
   ROIregions2009 = ['11','50','12','51','11104','12104','11107','12107','11108','12108',
                     '11117','12117','11118','12118','11126','12126','11133','12133','11134',
                     '12134','11136','12136','11141','12141','11148','12148','11149','12149',
                     '11150','12150','11174','12174','11175','12175']
   
   datasink_con_dir = 'level1_diff'
   
   nameOfFirstCondition = 'high1'
   
   #####################################################################################
   #FREESURFER COLOR TABLE CAN BE FOUND HERE:
   #http://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT
   

   # Tell freesurfer what subjects directory to use
   subjects_dir = experiment_dir + '/freesurfer'
   fs.FSCommand.set_default_subjects_dir(subjects_dir)
   
   """
   Define a ROI workflow
   =====================
   """
   #Initiation of the ROI extraction workflow
   ROIflow = pe.Workflow(name='ROIflow')
   ROIflow.base_dir = experiment_dir + Workingdir
   
   #Node: SubjectData
   infosource1 = pe.Node(interface=util.IdentityInterface(fields=['subject_id'],mandatory_inputs = False),
                        name="infosource1")
   infosource1.iterables = ('subject_id', subjects)
   
   infosource2 = pe.Node(interface=util.IdentityInterface(fields=['contrast_id'],mandatory_inputs = False),
                        name="infosource2")
   infosource2.iterables = ('contrast_id', contrasts)
   

   #Node: DataGrabber - To grab the input data
   datasource = pe.Node(interface=nio.DataGrabber(infields=['subject_id','contrast_id'],outfields=['contrast','bb_id']),
                        name = 'datasource')
   datasource.inputs.base_directory = experiment_dir
   datasource.inputs.template = 'result/'+datasink_con_dir+'/%s/_subject_id_%s/%s%s%s'
   
   info = dict(contrast = [['vol_contrasts','subject_id','con_00','contrast_id','.img']],
               bb_id = [['bbregister','subject_id','mean'+nameOfFirstCondition+'_bbreg_','subject_id','.dat']])
   
   datasource.inputs.template_args = info
   
   #Node: FreeSurferSource
   fssource = pe.Node(interface=nio.FreeSurferSource(),name='fssource')
   fssource.inputs.subjects_dir = subjects_dir
   
   #Node: MRIConvert
   MRIconversion = pe.Node(interface=fs.MRIConvert(),name='MRIconversion')
   MRIconversion.inputs.out_type = 'nii'
   
   #Resample contrasts into anatomicale space - creating con_*.anat.bb.mgh
   transformation = pe.Node(interface=fs.ApplyVolTransform(),name='transformation')
   transformation.inputs.fs_target = True
   transformation.inputs.interp = 'nearest'
   
   #Node: SegStats
   segmentation = pe.Node(interface=fs.SegStats(),name='segmentation')
   segmentation.inputs.color_table_file = '/software/Freesurfer/5.1.0/FreeSurferColorLUT.txt'
   segmentation.inputs.segment_id = ROIregions
   
   #Node: SegStats2009
   segmentation2009 = pe.Node(interface=fs.SegStats(),name='segmentation2009')
   segmentation2009.inputs.color_table_file = '/software/Freesurfer/5.1.0/FreeSurferColorLUT.txt'
   segmentation2009.inputs.segment_id = ROIregions2009
   
   #Node: Datasink - Create a datasink node to store important outputs
   datasink = pe.Node(interface=nio.DataSink(), name="datasink")
   datasink.inputs.base_directory = experiment_dir
   datasink.inputs.container = ROIOutput
   
   def getVersion(in_file, version):
       if version == 0:
          return in_file[0]
       else:
          return in_file[1]
   
   #Connect up all components
   ROIflow.connect([(infosource1, datasource,[('subject_id', 'subject_id')]),
                    (infosource2, datasource,[('contrast_id', 'contrast_id')]),
                    (infosource1, fssource,[('subject_id', 'subject_id')]),
                    (fssource, segmentation,[(('aparc_aseg',getVersion,0), 'segmentation_file')]),
                    (fssource, segmentation2009,[(('aparc_aseg',getVersion,1), 'segmentation_file')]),
                    (datasource, MRIconversion,[('contrast', 'in_file')]),
                    (MRIconversion, transformation,[('out_file', 'source_file')]),
                    (datasource, transformation,[('bb_id', 'reg_file')]),
                    (transformation, segmentation,[('transformed_file', 'in_file')]),
                    (transformation, segmentation2009,[('transformed_file', 'in_file')]),
                    (segmentation, datasink,[('summary_file', 'segstat')]),
                    (segmentation2009, datasink,[('summary_file', 'segstat2009')]),
                    ])
   

   """
   Run the pipeline and generate the graph
   =======================================
   """
   ROIflow.write_graph(graph2use='flat')
   ROIflow.run(plugin='MultiProc', plugin_args={'n_procs' : 2})

   
   """
   Summarizing the output in a cvs-file
   ====================================
   """
   
   for contrast in contrasts:
   
       output = []
       for i in range(15000):
           output.append([i,'LABEL'])
   
       subjectNumber = 1
   
       for subject in subjects:
   
           #Find the location of the two output files
           statsFile = experiment_dir+'/'+ROIOutput+'/segstat/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
           statsFile2009 = experiment_dir+'/'+ROIOutput+'/segstat2009/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
   
           #Get the data from the two output files
           dataFile = open(statsFile, 'r')
           data = dataFile.readlines()
           dataFile.close()
           dataFile = open(statsFile2009, 'r')
           data2009 = dataFile.readlines()
           dataFile.close()
       
           #to check where the data starts
           def findStartOfData(datafile):
               for line in range(100):
                   if datafile[line][0] != '#':
                       return line
       
           tempresult = []
   
           for line in range(len(data)):
               if line < findStartOfData(data):
                   pass
               else:
                   temp = data[line].strip('\n').split()
                   tempresult.append([int(temp[1]),temp[4],float(temp[5])])

           for line in range(len(data2009)):
               if line < findStartOfData(data2009):
                   pass
               else:
                   temp = data2009[line].strip('\n').split()
                   tempresult.append([int(temp[1]),temp[4],float(temp[5])])
   
           tempresult.sort()
   
           result = []
   
           for line in range(len(tempresult)):
               if line > 0 and tempresult[line] == tempresult[line-1]:
                   pass
               else:
                   result.append(tempresult[line])
   
           for ROI in result:
               if output[ROI[0]][1] == 'LABEL':
                  output[ROI[0]][1] = ROI[1]
               output[ROI[0]].append(ROI[2])
   
           for ROI in output:
               if len(ROI) < subjectNumber+2:
                  ROI.append(0.0)
   
           subjectNumber += 1
   
       
       output.insert(0,['SegId','StructName'])
       output[0].extend(subjects)
   
       output = [ROI for ROI in output if ROI[1] != 'LABEL']
   

       import csv
       f = open(ROIOutput+'/ROI_'+contrast+'_result.csv','wb')
       outputFile = csv.writer(f)
   
       for line in output:
           outputFile.writerow(line)
   
       f.close()


Anatomical ROIs
===============

Now that we have defined how the structure of our pipeline and the connections
should be we can start with writing the pipeline script.


Import modules
~~~~~~~~~~~~~~

First we have to import all necessary modules.

.. testcode::

   """
   Import modules
   ==============
   """
   import os                                    # system functions
   import nipype.interfaces.fsl as fsl
   import nipype.interfaces.freesurfer as fs
   import nipype.interfaces.io as nio           # i/o routines
   import nipype.interfaces.utility as util     # utility
   import nipype.pipeline.engine as pe          # pypeline engine
   import numpy as np
   
   """
   Define experiment specific parameters
   =====================================
   """
   #To better access the parent folder of the experiment
   experiment_dir = os.getcwd()
   workingdir = '/result/workingdir_fROI_6b'
   fROIOutput =  'result/fROI_Output_6b'
   
   #name of the subjects, functional fiels and output folders
   subjects = ['asens_4','asens_5','asens_6','asens_7','asens_8','asens_9',
               'asens_10','asens_12','asens_13','asens_14','asens_15',
               'asens_16','asens_17','asens_18','asens_19','asens_20','asens_21']
   
   contrasts = [10,11,3]
   fROIcoordinations = [183,134,136]
   sphereSize = 3
   
   
   #to find the peak use this code
   """
   import nipype.interfaces.fsl as fsl
   cl = fsl.Cluster()
   cl.inputs.threshold = 0
   cl.inputs.in_file = '/mindhive/gablab/u/mnotter/att_sens/result/level2_diff/level2/_con_3/level2conestimate/spmT_0001.img'
   cl.run()
   """
   

   #to calculate where the ROI beginns
   startROI = [fROIcoordinations[0]-sphereSize/2,
               fROIcoordinations[1]-sphereSize/2,
               fROIcoordinations[2]-sphereSize/2]
   
   """
   Define a ROI workflow
   =====================
   """
   #Initiation of the fROI extraction workflow
   fROIflow = pe.Workflow(name='fROIflow')
   fROIflow.base_dir = experiment_dir + workingdir
   
   #Node: SubjectData
   infosource1 = pe.Node(interface=util.IdentityInterface(fields=['subject_id']),name="infosource1")
   infosource1.iterables = ('subject_id', subjects)
   infosource2 = pe.Node(interface=util.IdentityInterface(fields=['contrast_id']),name="infosource2")
   infosource2.iterables = ('contrast_id', contrasts)
   
   #Node: DataGrabber - To grab the input data
   datasource = pe.Node(interface=nio.DataGrabber(infields=['subject_id','contrast_id'],outfields=['contrast']),
                        name = 'datasource')
   datasource.inputs.base_directory = experiment_dir
   datasource.inputs.template = 'asens_normbrains_diff/%s/normcons/con_%04d_ants.nii'
   datasource.inputs.template_args = dict(contrast = [['subject_id','contrast_id']])
   
   #Node: ImageMaths - to create the ROI
   maths1 = pe.Node(interface=fsl.ImageMaths(),name="maths1")
   maths1.inputs.op_string = '-mul 0 -add 1 -roi %d %d %d %d %d %d 0 1'%(startROI[0],sphereSize,startROI[1],sphereSize,startROI[2],sphereSize)
   maths1.inputs.out_data_type = 'float'
   maths1.inputs.in_file = '/mindhive/gablab/u/mnotter/att_sens/asens_normbrains_diff/%s/normcons/con_%04d_ants.nii'%(subjects[0],contrasts[0])
   
   #Node: ImageMaths - to make the ROI spherical
   maths2 = pe.Node(interface=fsl.ImageMaths(),name="maths2")
   maths2.inputs.op_string = '-kernel sphere %d -fmean -thr 0.0000010000 -bin'%sphereSize
   maths2.inputs.out_data_type = 'float'
   
   #Node: SegStats - to calculate the segmentation
   segstat = pe.Node(interface=fs.SegStats(),name='segstat')
   
   #Node: Datasink - Create a datasink node to store important outputs
   datasink = pe.Node(interface=nio.DataSink(), name="datasink")
   datasink.inputs.base_directory = experiment_dir
   datasink.inputs.container = fROIOutput
   
   #Connect up all components
   fROIflow.connect([(maths1, maths2,[('out_file', 'in_file')]),
                     (infosource1, datasource,[('subject_id', 'subject_id')]),
                     (infosource2, datasource,[('contrast_id', 'contrast_id')]),
                     (maths2, segstat,[('out_file', 'segmentation_file')]),
                     (datasource, segstat,[('contrast', 'in_file')]),
                     (segstat, datasink,[('summary_file', '@statistic')]),
                     ])
   
   

   """
   Run the pipeline and generate the graph
   =======================================
   """
   fROIflow.write_graph(graph2use='flat')
   fROIflow.run(plugin='MultiProc', plugin_args={'n_procs' : 4})
   

   """
   Summarizing the output in a cvs-file
   ====================================
   """

   output = []
   output.append(['coordinations:',fROIcoordinations,'sphereSize:',sphereSize])
   
   for contrast in contrasts:
       contrast = str(contrast)
       output.append(['contrast:',contrast])
   
       for subject in subjects:
   
           statFile = experiment_dir + '/' + fROIOutput + '/_contrast_id_'+contrast+'/_subject_id_'+subject+'/summary.stats'
   
           #Get the data from the output file
           dataFile = open(statFile, 'r')
           data = dataFile.readlines()
           dataFile.close()
   
           output.append([subject,data[49].split()[5]])
   
       output.append([])
   
   import csv
   f = open(fROIOutput+'/fROI_spherical'+str(fROIcoordinations)+'_%s_result.csv'%sphereSize,'wb')
   outputFile = csv.writer(f)
   for line in output:
       outputFile.writerow(line)
   f.close()

