===========================
How To Visualize A Pipeline
===========================

What kind of graph do you need?
===============================

After the connection of all nodes of a pipeline is established we are able to create a graph which gives us a very good overview of our pipeline. For the example in the previous chapter, the command would simply be:

.. code-block:: py
   :linenos:

   metaflow.write_graph(graph2use='flat')

The variable ``graph2use`` can have the following four parameters:

* ``orig`` shows only the highest workflow
* ``flat`` shows all workflows with subworkflows
* ``exec`` shows all workflows with subworkflows and expands iterables into subgraphs
* ``hierarchical`` shows all workflows with subworkflows but maintains their hierarchy

All versions create two graph files except the hierarchical one. The difference of those two files is in the level of detail they are showing. There is a **simple overview graph** called ``graph.dot`` that shows you the basic connections between nodes and a **more detailed overview graph** called ``graph_detailed.dot`` that shows you additionally the outputs and inputs of each node and the connections between them. The **hierarchical graph** on the other side creates only a simple overview graph. But its iterable nodes are marked in a different grey tone and subgraphs are surrounded by a square to show their range.

.. note::
   The graph files can be found in the highest pipeline folder of your working directory.


Example graphs
==============

The following graphs are a visualization of the **first level analysis pipeline** or ``metaflow`` which you will encounter in the chapter: `How To Build A First Level Pipeline <http://miykael.github.com/nipype-beginner-s-guide/howToBuildAPipeline.html>`_


``orig`` - simple graph
~~~~~~~~~~~~~~~~~~~~~~~

This is the simple graph of the ``orig`` version and shows as an example the ``metaflow`` which you will encounter in a latter chapter. The name of the nodes is composed in the format of ``nodename.algorithm.interface``. Because this version of graphs only shows the highest workflow all the subgraphs contained in the ``frameflow`` are hidden.

.. image:: firstlevel_orig_simple.png


``orig`` - detailed graph
~~~~~~~~~~~~~~~~~~~~~~~~~

This detailed graph of the ``orig`` version shows the ``metaflow`` from the simple graph above but with a bit more informations. Now you can see which input of which node is connected to another. Because the subworkflow of the ``frameflow`` are hidden you only see what inputs and outputs go into this ``frameflow`` but not more.

.. image:: firstlevel_orig_detailed.png
   :width: 810


``flat`` - simple graph
~~~~~~~~~~~~~~~~~~~~~~~

This simple graph of the ``flat`` version shows the ``metaflow``. You can see now that the ``frameflow`` was expanded by its subnodes. 

.. image:: firstlevel_flat_simple.png
   :width: 810

But this version still doesn't show you if there are different kinds of subworkflows.


``flat`` - detailed graph
~~~~~~~~~~~~~~~~~~~~~~~~~

This detailed graph of the ``flat`` version shows the ``metaflow``. You can see now all nodes, their inputs and outputs and how they are connected to each other.

.. image:: firstlevel_flat_detailed.png
   :width: 1080

In this version you also see that the that the ``frameflow`` has actually three subworkflows called ``preproc``, ``surfanalysis`` and ``volanalysis``.


``exec`` - simple graph
~~~~~~~~~~~~~~~~~~~~~~~

This graph doesn't show you anything different than the simple graph of the ``flat`` version.


``exec`` - detailed graph
~~~~~~~~~~~~~~~~~~~~~~~~~

This detailed graph of the ``exec`` version shows the ``metaflow``. You can see that you get the same level of detail as if you would run it with ``flat`` but all iterables are expandend so that you can see all the nodes that would be processed in parallel are shown at once.

.. image:: firstlevel_exec_detailed.png
   :width: 1080

In this case the infosource node iterates over ``subject1`` and ``subject2``.

.. note::
 
   As you can see from this graph every iteration creates a subgraph with its own index, in this case ``a0`` and ``a1``. Because the iteration of this workflow starts with the infosource node, the indexing already starts there.


``hierarchical`` - simple graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This graph of the ``hierarchical`` version shows the ``metaflow``. This graph doesn't show you the inputs and outputs of each node, but it shows you how many connections exist between nodes and it surrounds each workflow with its own box to support a clear separation of the subworkflows.

.. image:: firstlevel_hierarchical.png
   :width: 810

In this example you clearly see that the ``metaflow`` contains a ``frameflow`` which itself contains three subworkflows ``preproc``, ``volanalysis`` and ``surfanalysis``.


.. note::
   The coloration of this graphs was done manually and doesn't get created by nipype itself.
